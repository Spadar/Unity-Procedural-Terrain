//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using LibNoise.Generator;
using LibNoise.Operator;
using AssemblyCSharp;

namespace AssemblyCSharp
{
	public class WorldTerrain
	{
		public static int heightMapResolution;
		public static int alphaMapResolution;
		public static int tileSize;
		public static int ceilingHeight;
		
		public static int noiseScale;
		public static int seed;
		
		public static Vector3 dataSize;
		public static float size;
		
		public static GameObject waterPrefab;
		
		public static float sea_level = 0.3f;
		
		
		#region TextureRanges
		//These ranges define how various textures will be expressed in terrain based on altitude
		//Between a given Min and Max, the texture will be expressed at 100%.
		//Then the texture will go from 100% to 0% in the distance of the Blend value. 
		
		//Example: At Sea_Level, sand will be expressed at 100%. At Sea_Level + sandBlend, it will be expressed at 0%. At Sea_Level + sandBlend/2 it will be expressed at 50%;
		
		#region heighTextureRanges
		static float sandHeightMin = 0f;
		static float sandHeightMax = sea_level * 1.1f;
		static float sandHeightBlend = 0.050f;
		
		static float grassHeightMin = sandHeightMax;
		static float grassHeightMax = 0.50f;
		static float grassHeightBlend = 0.05f;
		
		static float rockyGrassHeightMin = grassHeightMax;
		static float rockyGrassHeightMax = 0.90f;
		static float rockyGrassHeightBlend = 0.05f;
		
		static float cliffHeightMin = rockyGrassHeightMax;
		static float cliffHeightMax = 1.0f;
		static float cliffHeightBlend = 0.025f;
		
		public static Dictionary<string,SplatMapComparator> heightTextureComparators = new Dictionary<string, SplatMapComparator>() {
			{"sand", new SplatMapComparator(sandHeightMax, sandHeightMin, sandHeightBlend)},
			{"grass", new SplatMapComparator(grassHeightMax, grassHeightMin, grassHeightBlend)},
			{"rockyGrass", new SplatMapComparator(rockyGrassHeightMax, rockyGrassHeightMin, rockyGrassHeightBlend)},
			{"cliff", new SplatMapComparator(cliffHeightMax, cliffHeightMin, cliffHeightBlend)}
		};
		#endregion
		
		#region steepnessTextureRanges
		static float nonCliffSteepnessMin = 0f;
		static float nonCliffSteepnessMax = cliffSteepnessMin;
		static float nonCliffSteepnessBlend = cliffSteepnessBlend;
		
		static float cliffSteepnessMin = 0.0006f;
		static float cliffSteepnessMax = 1.0f;
		static float cliffSteepnessBlend = 0.0002f;
		
		public static Dictionary<string,SplatMapComparator> steepnessTextureComparators = new Dictionary<string, SplatMapComparator>() {
			{"sand", new SplatMapComparator(nonCliffSteepnessMax, nonCliffSteepnessMin, nonCliffSteepnessBlend)},
			{"grass", new SplatMapComparator(nonCliffSteepnessMax, nonCliffSteepnessMin, nonCliffSteepnessBlend)},
			{"rockyGrass", new SplatMapComparator(nonCliffSteepnessMax, nonCliffSteepnessMin, nonCliffSteepnessBlend)},
			{"cliff", new SplatMapComparator(cliffSteepnessMax, cliffSteepnessMin, cliffSteepnessBlend)}
		};
		#endregion
		
		#endregion
	
		public WorldTerrain ()
		{
		}
		
		public static Dictionary<string, TerrainTile> terrainMap = new Dictionary<string, TerrainTile>();
		
		public static Dictionary<string, TerrainTile> pendingTerrain = new Dictionary<string, TerrainTile>();
		
		public static string getTerrainName(int x, int y){
			string terrainName = "Terrain:" + x + "," + y;
			return terrainName;
		}
		
		public static Vector2 getGridCoordinate(Vector3 position){
			Vector2 coordinate = new Vector2 ();
			
			coordinate.x = Mathf.FloorToInt (position.x / (size));
			coordinate.y = Mathf.FloorToInt (position.z / (size));
			
			return coordinate;
		}
		
		public static int getGridDistance(Vector2 pos1, Vector2 pos2){
			return Mathf.FloorToInt(Mathf.Sqrt ( Mathf.Pow((pos1.x - pos2.x),2) + Mathf.Pow((pos1.y - pos2.y),2)));
		}
		
		public struct LocalCoordinate
		{
			public Vector2 tileAddress;
			public Vector2 localCoordinate;
		}
		
		/// <summary>
		/// Converts worldspace coordinates to local coordinates in a tile
		/// Since different aspects of a tile may have different widths,
		/// width must be specified
		/// </summary>
		/// <returns>The to local.</returns>
		/// <param name="position">Position.</param>
		/// <param name="width">Width.</param>
		public static LocalCoordinate WorldToLocal(Vector3 position, int width)
		{
			LocalCoordinate result = new LocalCoordinate();
			
			result.tileAddress = getGridCoordinate(position);
			
			float remainderX = (position.x - (result.tileAddress.x * (float)size));
			float remainderY = (position.z - (result.tileAddress.y * (float)size));
			
			float normalizedX = remainderX/(float)size;
			float normalizedY = remainderY/(float)size;
			
			float relativeX = Mathf.FloorToInt(normalizedX * (float)width);
			float relativeY = Mathf.FloorToInt(normalizedY * (float)width);
			
			result.localCoordinate.x = relativeY;
			result.localCoordinate.y = relativeX;
			
			return result;
		}
	}
}

